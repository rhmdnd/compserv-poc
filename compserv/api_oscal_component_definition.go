/*
 * OSCAL REST
 *
 * A draft proposal from [Easy Dynamics](https://www.easydynamics.com) of a REST API specification for interacting   with [OSCAL](https://pages.nist.gov/OSCAL/) models.  Standardized data models like OSCAL lay the groundwork for interoperability of systems, and an ecosystem of meaningful integrations can be brought to life through a standardized REST API. That interface needs to define simple CRUD operations, but should also describe how to manipulate relationships and make partial changes.  Such an API will likely see the most success across various vendors and projects when maintained by a standards body or community, and we're looking to get that conversation started with this effort.  ## Identifier Scope Note that all object identifiers are **scoped to the system** implementing the REST API   and are expected to be unique.  <details>   <summary>Example</summary>   To associate a Party with a known Component Definition with a UUID you might:   1. Search for the Party:       ```       GET /parties/search?query=bob       ```       ```       [         {           \"uuid\": \"d834ed5e-9652-4b78-87e7-a9f8686f4e60\",           \"type\": \"person\",           \"name\": \"Bob Johnson\"         }       ]       ```   2. Use the found Party's ID to associate with the component definition:       ```       PUT /component-definitions/599b6fa5-3e18-4580-bd8f-8a181776c6e8/parties/d834ed5e-9652-4b78-87e7-a9f8686f4e60       ``` </details>  ## Partial Payloads in PATCH Requests All updates to 'root' OSCAL objects via `PATCH` requests should accept a partial payload containing only the changed data and the entire updated object should be returned.  The UUID of the root object must not change in the payload and implementations should throw an error if such a request is made. <details>   <summary>Example</summary>   Example request:   ```   PATCH /system-security-plans/cff8385f-108e-40a5-8f7a-82f3dc0eaba8   {     \"system-security-plan\": {       \"uuid\": \"cff8385f-108e-40a5-8f7a-82f3dc0eaba8\",       \"metadata\": {         \"title\": \"Some New Title\"       }     }   }   ``` </details> 
 *
 * API version: 0.1.0
 * Contact: info@easydynamics.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package compserv

import (
	"encoding/json"
	"net/http"
	"strings"

	"github.com/gorilla/mux"
)

// OSCALComponentDefinitionApiController binds http requests to an api service and writes the service results to the http response
type OSCALComponentDefinitionApiController struct {
	service OSCALComponentDefinitionApiServicer
	errorHandler ErrorHandler
}

// OSCALComponentDefinitionApiOption for how the controller is set up.
type OSCALComponentDefinitionApiOption func(*OSCALComponentDefinitionApiController)

// WithOSCALComponentDefinitionApiErrorHandler inject ErrorHandler into controller
func WithOSCALComponentDefinitionApiErrorHandler(h ErrorHandler) OSCALComponentDefinitionApiOption {
	return func(c *OSCALComponentDefinitionApiController) {
		c.errorHandler = h
	}
}

// NewOSCALComponentDefinitionApiController creates a default api controller
func NewOSCALComponentDefinitionApiController(s OSCALComponentDefinitionApiServicer, opts ...OSCALComponentDefinitionApiOption) Router {
	controller := &OSCALComponentDefinitionApiController{
		service:      s,
		errorHandler: DefaultErrorHandler,
	}

	for _, opt := range opts {
		opt(controller)
	}

	return controller
}

// Routes returns all the api routes for the OSCALComponentDefinitionApiController
func (c *OSCALComponentDefinitionApiController) Routes() Routes {
	return Routes{ 
		{
			"AddComponentControlImplementationToComponentDefinition",
			strings.ToUpper("Post"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/components/{componentId}/control-implementations",
			c.AddComponentControlImplementationToComponentDefinition,
		},
		{
			"AddComponentDefinition",
			strings.ToUpper("Post"),
			"/oscal/v1/component-definitions",
			c.AddComponentDefinition,
		},
		{
			"AddComponentToComponentDefinition",
			strings.ToUpper("Post"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/components",
			c.AddComponentToComponentDefinition,
		},
		{
			"AddPartyToComponentDefinition",
			strings.ToUpper("Put"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/parties/{partyId}",
			c.AddPartyToComponentDefinition,
		},
		{
			"AddPartyToComponentDefinitionRole",
			strings.ToUpper("Post"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/responsible-parties/{roleId}/parties/{partyId}",
			c.AddPartyToComponentDefinitionRole,
		},
		{
			"AddRoleToComponentDefinition",
			strings.ToUpper("Post"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/roles",
			c.AddRoleToComponentDefinition,
		},
		{
			"DeleteComponentDefinition",
			strings.ToUpper("Delete"),
			"/oscal/v1/component-definitions/{componentDefinitionId}",
			c.DeleteComponentDefinition,
		},
		{
			"FindComponentDefinitionsByName",
			strings.ToUpper("Get"),
			"/oscal/v1/component-definitions/search",
			c.FindComponentDefinitionsByName,
		},
		{
			"GetComponentDefinitionById",
			strings.ToUpper("Get"),
			"/oscal/v1/component-definitions/{componentDefinitionId}",
			c.GetComponentDefinitionById,
		},
		{
			"GetComponentDefinitions",
			strings.ToUpper("Get"),
			"/oscal/v1/component-definitions",
			c.GetComponentDefinitions,
		},
		{
			"RemoveComponentControlImplementationFromComponentDefinition",
			strings.ToUpper("Delete"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/components/{componentId}/control-implementations/{componentControlImplementationId}",
			c.RemoveComponentControlImplementationFromComponentDefinition,
		},
		{
			"RemoveComponentFromComponentDefinition",
			strings.ToUpper("Delete"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/components/{componentId}",
			c.RemoveComponentFromComponentDefinition,
		},
		{
			"RemovePartyFromComponentDefinition",
			strings.ToUpper("Delete"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/parties/{partyId}",
			c.RemovePartyFromComponentDefinition,
		},
		{
			"RemovePartyFromComponentDefinitionRole",
			strings.ToUpper("Delete"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/responsible-parties/{roleId}/parties/{partyId}",
			c.RemovePartyFromComponentDefinitionRole,
		},
		{
			"RemoveRoleFromComponentDefinition",
			strings.ToUpper("Delete"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/roles/{roleId}",
			c.RemoveRoleFromComponentDefinition,
		},
		{
			"ReplaceComponentDefinition",
			strings.ToUpper("Put"),
			"/oscal/v1/component-definitions/{componentDefinitionId}",
			c.ReplaceComponentDefinition,
		},
		{
			"UpdateComponentControlImplementationInComponentDefinition",
			strings.ToUpper("Patch"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/components/{componentId}/control-implementations/{componentControlImplementationId}",
			c.UpdateComponentControlImplementationInComponentDefinition,
		},
		{
			"UpdateComponentDefinition",
			strings.ToUpper("Patch"),
			"/oscal/v1/component-definitions/{componentDefinitionId}",
			c.UpdateComponentDefinition,
		},
		{
			"UpdateComponentInComponentDefinition",
			strings.ToUpper("Patch"),
			"/oscal/v1/component-definitions/{componentDefinitionId}/components/{componentId}",
			c.UpdateComponentInComponentDefinition,
		},
	}
}

// AddComponentControlImplementationToComponentDefinition - Adds a new control implementation to a component in an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) AddComponentControlImplementationToComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	componentIdParam := params["componentId"]
	
	oscalComponentDefinitionComponentControlImplementationParam := OscalComponentDefinitionComponentControlImplementation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oscalComponentDefinitionComponentControlImplementationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionComponentControlImplementationRequired(oscalComponentDefinitionComponentControlImplementationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.AddComponentControlImplementationToComponentDefinition(r.Context(), componentDefinitionIdParam, componentIdParam, oscalComponentDefinitionComponentControlImplementationParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AddComponentDefinition - Adds a new OSCAL component definition
func (c *OSCALComponentDefinitionApiController) AddComponentDefinition(w http.ResponseWriter, r *http.Request) {
	bodyParam := OscalComponentDefinition{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.AddComponentDefinition(r.Context(), bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AddComponentToComponentDefinition - Adds a new component to an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) AddComponentToComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	oscalComponentDefinitionComponentParam := OscalComponentDefinitionComponent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oscalComponentDefinitionComponentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionComponentRequired(oscalComponentDefinitionComponentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.AddComponentToComponentDefinition(r.Context(), componentDefinitionIdParam, oscalComponentDefinitionComponentParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AddPartyToComponentDefinition - Associates a party with an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) AddPartyToComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	partyIdParam := params["partyId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.AddPartyToComponentDefinition(r.Context(), componentDefinitionIdParam, partyIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AddPartyToComponentDefinitionRole - Associates a party with role within an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) AddPartyToComponentDefinitionRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	roleIdParam := params["roleId"]
	
	partyIdParam := params["partyId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.AddPartyToComponentDefinitionRole(r.Context(), componentDefinitionIdParam, roleIdParam, partyIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// AddRoleToComponentDefinition - Adds a new role to an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) AddRoleToComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	oscalRoleParam := OscalRole{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oscalRoleParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalRoleRequired(oscalRoleParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.AddRoleToComponentDefinition(r.Context(), componentDefinitionIdParam, oscalRoleParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// DeleteComponentDefinition - Deletes an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) DeleteComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.DeleteComponentDefinition(r.Context(), componentDefinitionIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// FindComponentDefinitionsByName - Searches for OSCAL component definitions by name
func (c *OSCALComponentDefinitionApiController) FindComponentDefinitionsByName(w http.ResponseWriter, r *http.Request) {
	query := r.URL.Query()
	queryParam := query.Get("query")
	result, err := c.service.FindComponentDefinitionsByName(r.Context(), queryParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetComponentDefinitionById - Finds an OSCAL component definition by ID
func (c *OSCALComponentDefinitionApiController) GetComponentDefinitionById(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	result, err := c.service.GetComponentDefinitionById(r.Context(), componentDefinitionIdParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// GetComponentDefinitions - Returns all OSCAL component definitions
func (c *OSCALComponentDefinitionApiController) GetComponentDefinitions(w http.ResponseWriter, r *http.Request) {
	result, err := c.service.GetComponentDefinitions(r.Context())
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemoveComponentControlImplementationFromComponentDefinition - Removes a component control implementation from an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) RemoveComponentControlImplementationFromComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	componentIdParam := params["componentId"]
	
	componentControlImplementationIdParam := params["componentControlImplementationId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.RemoveComponentControlImplementationFromComponentDefinition(r.Context(), componentDefinitionIdParam, componentIdParam, componentControlImplementationIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemoveComponentFromComponentDefinition - Removes a component from an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) RemoveComponentFromComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	componentIdParam := params["componentId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.RemoveComponentFromComponentDefinition(r.Context(), componentDefinitionIdParam, componentIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemovePartyFromComponentDefinition - Removes a party from an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) RemovePartyFromComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	partyIdParam := params["partyId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.RemovePartyFromComponentDefinition(r.Context(), componentDefinitionIdParam, partyIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemovePartyFromComponentDefinitionRole - Removes a party from a role within an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) RemovePartyFromComponentDefinitionRole(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	roleIdParam := params["roleId"]
	
	partyIdParam := params["partyId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.RemovePartyFromComponentDefinitionRole(r.Context(), componentDefinitionIdParam, roleIdParam, partyIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// RemoveRoleFromComponentDefinition - Removes a role from an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) RemoveRoleFromComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	roleIdParam := params["roleId"]
	
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.RemoveRoleFromComponentDefinition(r.Context(), componentDefinitionIdParam, roleIdParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// ReplaceComponentDefinition - Replaces an existing OSCAL component definition
func (c *OSCALComponentDefinitionApiController) ReplaceComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	bodyParam := OscalComponentDefinition{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.ReplaceComponentDefinition(r.Context(), componentDefinitionIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateComponentControlImplementationInComponentDefinition - Updates an existing control implementation in a component in an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) UpdateComponentControlImplementationInComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	componentIdParam := params["componentId"]
	
	componentControlImplementationIdParam := params["componentControlImplementationId"]
	
	oscalComponentDefinitionComponentControlImplementationParam := OscalComponentDefinitionComponentControlImplementation{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oscalComponentDefinitionComponentControlImplementationParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionComponentControlImplementationRequired(oscalComponentDefinitionComponentControlImplementationParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.UpdateComponentControlImplementationInComponentDefinition(r.Context(), componentDefinitionIdParam, componentIdParam, componentControlImplementationIdParam, oscalComponentDefinitionComponentControlImplementationParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateComponentDefinition - Updates an existing OSCAL component definition
func (c *OSCALComponentDefinitionApiController) UpdateComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	bodyParam := OscalComponentDefinitionUpdateExample{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&bodyParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionUpdateExampleRequired(bodyParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	result, err := c.service.UpdateComponentDefinition(r.Context(), componentDefinitionIdParam, bodyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}

// UpdateComponentInComponentDefinition - Updates an existing component in an OSCAL component definition
func (c *OSCALComponentDefinitionApiController) UpdateComponentInComponentDefinition(w http.ResponseWriter, r *http.Request) {
	params := mux.Vars(r)
	componentDefinitionIdParam := params["componentDefinitionId"]
	
	componentIdParam := params["componentId"]
	
	oscalComponentDefinitionComponentParam := OscalComponentDefinitionComponent{}
	d := json.NewDecoder(r.Body)
	d.DisallowUnknownFields()
	if err := d.Decode(&oscalComponentDefinitionComponentParam); err != nil {
		c.errorHandler(w, r, &ParsingError{Err: err}, nil)
		return
	}
	if err := AssertOscalComponentDefinitionComponentRequired(oscalComponentDefinitionComponentParam); err != nil {
		c.errorHandler(w, r, err, nil)
		return
	}
	apiKeyParam := r.Header.Get("api_key")
	result, err := c.service.UpdateComponentInComponentDefinition(r.Context(), componentDefinitionIdParam, componentIdParam, oscalComponentDefinitionComponentParam, apiKeyParam)
	// If an error occurred, encode the error with the status code
	if err != nil {
		c.errorHandler(w, r, err, &result)
		return
	}
	// If no error, encode the body and the result code
	EncodeJSONResponse(result.Body, &result.Code, w)

}
