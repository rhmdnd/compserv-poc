/*
 * OSCAL REST
 *
 * A draft proposal from [Easy Dynamics](https://www.easydynamics.com) of a REST API specification for interacting   with [OSCAL](https://pages.nist.gov/OSCAL/) models.  Standardized data models like OSCAL lay the groundwork for interoperability of systems, and an ecosystem of meaningful integrations can be brought to life through a standardized REST API. That interface needs to define simple CRUD operations, but should also describe how to manipulate relationships and make partial changes.  Such an API will likely see the most success across various vendors and projects when maintained by a standards body or community, and we're looking to get that conversation started with this effort.  ## Identifier Scope Note that all object identifiers are **scoped to the system** implementing the REST API   and are expected to be unique.  <details>   <summary>Example</summary>   To associate a Party with a known Component Definition with a UUID you might:   1. Search for the Party:       ```       GET /parties/search?query=bob       ```       ```       [         {           \"uuid\": \"d834ed5e-9652-4b78-87e7-a9f8686f4e60\",           \"type\": \"person\",           \"name\": \"Bob Johnson\"         }       ]       ```   2. Use the found Party's ID to associate with the component definition:       ```       PUT /component-definitions/599b6fa5-3e18-4580-bd8f-8a181776c6e8/parties/d834ed5e-9652-4b78-87e7-a9f8686f4e60       ``` </details>  ## Partial Payloads in PATCH Requests All updates to 'root' OSCAL objects via `PATCH` requests should accept a partial payload containing only the changed data and the entire updated object should be returned.  The UUID of the root object must not change in the payload and implementations should throw an error if such a request is made. <details>   <summary>Example</summary>   Example request:   ```   PATCH /system-security-plans/cff8385f-108e-40a5-8f7a-82f3dc0eaba8   {     \"system-security-plan\": {       \"uuid\": \"cff8385f-108e-40a5-8f7a-82f3dc0eaba8\",       \"metadata\": {         \"title\": \"Some New Title\"       }     }   }   ``` </details> 
 *
 * API version: 0.1.0
 * Contact: info@easydynamics.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package compserv

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// AddComponentControlImplementationToComponentDefinition - Adds a new control implementation to a component in an OSCAL component definition
func AddComponentControlImplementationToComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddComponentDefinition - Adds a new OSCAL component definition
func AddComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddComponentToComponentDefinition - Adds a new component to an OSCAL component definition
func AddComponentToComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddPartyToComponentDefinition - Associates a party with an OSCAL component definition
func AddPartyToComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddPartyToComponentDefinitionRole - Associates a party with role within an OSCAL component definition
func AddPartyToComponentDefinitionRole(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddRoleToComponentDefinition - Adds a new role to an OSCAL component definition
func AddRoleToComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteComponentDefinition - Deletes an OSCAL component definition
func DeleteComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindComponentDefinitionsByName - Searches for OSCAL component definitions by name
func FindComponentDefinitionsByName(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetComponentDefinitionById - Finds an OSCAL component definition by ID
func GetComponentDefinitionById(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetComponentDefinitions - Returns all OSCAL component definitions
func GetComponentDefinitions(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveComponentControlImplementationFromComponentDefinition - Removes a component control implementation from an OSCAL component definition
func RemoveComponentControlImplementationFromComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveComponentFromComponentDefinition - Removes a component from an OSCAL component definition
func RemoveComponentFromComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemovePartyFromComponentDefinition - Removes a party from an OSCAL component definition
func RemovePartyFromComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemovePartyFromComponentDefinitionRole - Removes a party from a role within an OSCAL component definition
func RemovePartyFromComponentDefinitionRole(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveRoleFromComponentDefinition - Removes a role from an OSCAL component definition
func RemoveRoleFromComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ReplaceComponentDefinition - Replaces an existing OSCAL component definition
func ReplaceComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateComponentControlImplementationInComponentDefinition - Updates an existing control implementation in a component in an OSCAL component definition
func UpdateComponentControlImplementationInComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateComponentDefinition - Updates an existing OSCAL component definition
func UpdateComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateComponentInComponentDefinition - Updates an existing component in an OSCAL component definition
func UpdateComponentInComponentDefinition(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
