/*
 * OSCAL REST
 *
 * A draft proposal from [Easy Dynamics](https://www.easydynamics.com) of a REST API specification for interacting   with [OSCAL](https://pages.nist.gov/OSCAL/) models.  Standardized data models like OSCAL lay the groundwork for interoperability of systems, and an ecosystem of meaningful integrations can be brought to life through a standardized REST API. That interface needs to define simple CRUD operations, but should also describe how to manipulate relationships and make partial changes.  Such an API will likely see the most success across various vendors and projects when maintained by a standards body or community, and we're looking to get that conversation started with this effort.  ## Identifier Scope Note that all object identifiers are **scoped to the system** implementing the REST API   and are expected to be unique.  <details>   <summary>Example</summary>   To associate a Party with a known Component Definition with a UUID you might:   1. Search for the Party:       ```       GET /parties/search?query=bob       ```       ```       [         {           \"uuid\": \"d834ed5e-9652-4b78-87e7-a9f8686f4e60\",           \"type\": \"person\",           \"name\": \"Bob Johnson\"         }       ]       ```   2. Use the found Party's ID to associate with the component definition:       ```       PUT /component-definitions/599b6fa5-3e18-4580-bd8f-8a181776c6e8/parties/d834ed5e-9652-4b78-87e7-a9f8686f4e60       ``` </details>  ## Partial Payloads in PATCH Requests All updates to 'root' OSCAL objects via `PATCH` requests should accept a partial payload containing only the changed data and the entire updated object should be returned.  The UUID of the root object must not change in the payload and implementations should throw an error if such a request is made. <details>   <summary>Example</summary>   Example request:   ```   PATCH /system-security-plans/cff8385f-108e-40a5-8f7a-82f3dc0eaba8   {     \"system-security-plan\": {       \"uuid\": \"cff8385f-108e-40a5-8f7a-82f3dc0eaba8\",       \"metadata\": {         \"title\": \"Some New Title\"       }     }   }   ``` </details> 
 *
 * API version: 0.1.0
 * Contact: info@easydynamics.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package compserv

import (
	"context"
	"net/http"
	"errors"
)

// OSCALCatalogApiService is a service that implements the logic for the OSCALCatalogApiServicer
// This service should implement the business logic for every endpoint for the OSCALCatalogApi API.
// Include any external packages or services that will be required by this service.
type OSCALCatalogApiService struct {
}

// NewOSCALCatalogApiService creates a default api service
func NewOSCALCatalogApiService() OSCALCatalogApiServicer {
	return &OSCALCatalogApiService{}
}

// AddCatalog - Adds a new OSCAL control catalog
func (s *OSCALCatalogApiService) AddCatalog(ctx context.Context, body OscalCatalog) (ImplResponse, error) {
	// TODO - update AddCatalog with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(405, {}) or use other options such as http.Ok ...
	//return Response(405, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("AddCatalog method not implemented")
}

// DeleteCatalog - Deletes an OSCAL control catalog
func (s *OSCALCatalogApiService) DeleteCatalog(ctx context.Context, catalogId string, apiKey string) (ImplResponse, error) {
	// TODO - update DeleteCatalog with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("DeleteCatalog method not implemented")
}

// FindCatalogsByName - Searches for OSCAL control catalogs by name
func (s *OSCALCatalogApiService) FindCatalogsByName(ctx context.Context, query string) (ImplResponse, error) {
	// TODO - update FindCatalogsByName with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []OscalCatalog{}) or use other options such as http.Ok ...
	//return Response(200, []OscalCatalog{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("FindCatalogsByName method not implemented")
}

// GetCatalogById - Finds an OSCAL control catalog by ID
func (s *OSCALCatalogApiService) GetCatalogById(ctx context.Context, catalogId string) (ImplResponse, error) {
	// TODO - update GetCatalogById with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, OscalCatalog{}) or use other options such as http.Ok ...
	//return Response(200, OscalCatalog{}), nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetCatalogById method not implemented")
}

// GetCatalogs - Returns all OSCAL control catalogs
func (s *OSCALCatalogApiService) GetCatalogs(ctx context.Context) (ImplResponse, error) {
	// TODO - update GetCatalogs with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, []OscalCatalog{}) or use other options such as http.Ok ...
	//return Response(200, []OscalCatalog{}), nil

	return Response(http.StatusNotImplemented, nil), errors.New("GetCatalogs method not implemented")
}

// ReplaceCatalog - Replaces an existing OSCAL catalog
func (s *OSCALCatalogApiService) ReplaceCatalog(ctx context.Context, catalogId string, body OscalCatalog) (ImplResponse, error) {
	// TODO - update ReplaceCatalog with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(200, OscalCatalog{}) or use other options such as http.Ok ...
	//return Response(200, OscalCatalog{}), nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(415, {}) or use other options such as http.Ok ...
	//return Response(415, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("ReplaceCatalog method not implemented")
}

// UpdateCatalog - Updates an existing OSCAL control catalog
func (s *OSCALCatalogApiService) UpdateCatalog(ctx context.Context, catalogId string, body OscalCatalogUpdateExample) (ImplResponse, error) {
	// TODO - update UpdateCatalog with the required logic for this service method.
	// Add api_oscal_catalog_service.go to the .openapi-generator-ignore to avoid overwriting this service implementation when updating open api generation.

	//TODO: Uncomment the next line to return response Response(400, {}) or use other options such as http.Ok ...
	//return Response(400, nil),nil

	//TODO: Uncomment the next line to return response Response(404, {}) or use other options such as http.Ok ...
	//return Response(404, nil),nil

	//TODO: Uncomment the next line to return response Response(405, {}) or use other options such as http.Ok ...
	//return Response(405, nil),nil

	return Response(http.StatusNotImplemented, nil), errors.New("UpdateCatalog method not implemented")
}
