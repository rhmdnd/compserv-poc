#!/bin/bash

display_description() {
    echo "Create a development database on AWS RDS"
    echo ""
    echo "NOTE: This script assumes that you have the 'aws' binary installed"
    echo ""
}

print_usage() {
    cmd=$(basename $0)
    echo "Usage: $cmd [OPTIONS]... -g security-group-id"
    echo "    -g [string]             AWS VPC security group ID (required)."
    echo "    -n [string]             The database name (default: compserv)."
    echo "    -i [string]             The database instance ID (default: compserv-database)."
    echo "    -e [string]             The database engine (default: postgres)."
    echo "    -c [string]             The database instance class (default: db.t3.micro)."
    echo "    -u [string]             The database user name (default: postgres)."
    echo "    -p [string]             The database password (automatically generated by default)."
    echo "    -a [string]             AWS availability zone (default: us-east-2b)."
    echo "    -s [int]                Allocated storage in gigabytes (default: 100)."
    echo "    -h                      Display this help message."
}

while getopts "g:n:i:e:c:u:p:a:s:h" opt; do
    case ${opt} in
        g )
            VPC_SECURITY_GROUP_ID="$OPTARG"
            ;;
        n )
            DATABASE_NAME="$OPTARG"
            ;;
        i )
            DATABASE_INSTANCE_ID="$OPTARG"
            ;;
        e )
            DATABASE_ENGINE="$OPTARG"
            ;;
        c )
            DATABASE_INSTANCE_CLASS="$OPTARG"
            ;;
        u )
            DATABASE_USERNAME="$OPTARG"
            ;;
        p )
            DATABASE_PASSWORD="$OPTARG"
            ;;
        a )
            DATABASE_AZ="$OPTARG"
            ;;
        s )
            DATABASE_STORAGE="$OPTARG"
            ;;
        h )
            display_description
            print_usage
            exit 0
            ;;
        \? )
            print_usage
            exit 1
            ;;
    esac
done

if [[ -z "$VPC_SECURITY_GROUP_ID" ]]; then
  echo "You must specify an AWS VPC security group ID."
  print_usage
  exit 1
fi

DATABASE_NAME=${DATABASE_NAME:-compserv}
DATABASE_INSTANCE_ID=${DATABASE_INSTANCE_ID:-compserv-database}
DATABASE_ENGINE=${DATABASE_ENGINE:-postgres}
DATABASE_INSTANCE_CLASS=${DATABASE_INSTANCE_CLASS:-db.t3.micro}
DATABASE_USERNAME=${DATABASE_USERNAME:-postgres}
DATABASE_PASSWORD=${DATABASE_PASSWORD:-`< /dev/urandom tr -dc _A-Z-a-z-0-9 | head -c20`}
DATABASE_AZ=${DATABASE_AZ:-us-east-2b}
DATABASE_STORAGE=${DATABASE_STORAGE:-100}

# This makes some assumptions that might not always be correct, like relying on
# the first element of the returned list and assuming that will work within the
# default availability zone. We might need to come back and make this smarter,
# or find a better approach.
DATABASE_SUBNET_NAME=`aws rds describe-db-subnet-groups --output json | jq -r ".DBSubnetGroups[0].DBSubnetGroupName"`

AWS_PAGER="" aws rds create-db-instance \
  --db-instance-identifier $DATABASE_INSTANCE_ID \
  --db-name $DATABASE_NAME \
  --db-instance-class $DATABASE_INSTANCE_CLASS \
  --db-subnet-group-name $DATABASE_SUBNET_NAME \
  --vpc-security-group-ids $VPC_SECURITY_GROUP_ID \
  --allocated-storage $DATABASE_STORAGE \
  --master-username $DATABASE_USERNAME \
  --master-user-password $DATABASE_PASSWORD \
  --availability-zone $DATABASE_AZ \
  --engine $DATABASE_ENGINE \
  --publicly-accessible \
  --output json

echo "Database credentials: $DATABASE_USERNAME:$DATABASE_PASSWORD"
