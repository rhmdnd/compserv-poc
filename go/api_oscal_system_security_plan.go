/*
 * OSCAL REST
 *
 * A draft proposal from [Easy Dynamics](https://www.easydynamics.com) of a REST API specification for interacting   with [OSCAL](https://pages.nist.gov/OSCAL/) models.  Standardized data models like OSCAL lay the groundwork for interoperability of systems, and an ecosystem of meaningful integrations can be brought to life through a standardized REST API. That interface needs to define simple CRUD operations, but should also describe how to manipulate relationships and make partial changes.  Such an API will likely see the most success across various vendors and projects when maintained by a standards body or community, and we're looking to get that conversation started with this effort.  ## Identifier Scope Note that all object identifiers are **scoped to the system** implementing the REST API   and are expected to be unique.  <details>   <summary>Example</summary>   To associate a Party with a known Component Definition with a UUID you might:   1. Search for the Party:       ```       GET /parties/search?query=bob       ```       ```       [         {           \"uuid\": \"d834ed5e-9652-4b78-87e7-a9f8686f4e60\",           \"type\": \"person\",           \"name\": \"Bob Johnson\"         }       ]       ```   2. Use the found Party's ID to associate with the component definition:       ```       PUT /component-definitions/599b6fa5-3e18-4580-bd8f-8a181776c6e8/parties/d834ed5e-9652-4b78-87e7-a9f8686f4e60       ``` </details>  ## Partial Payloads in PATCH Requests All updates to 'root' OSCAL objects via `PATCH` requests should accept a partial payload containing only the changed data and the entire updated object should be returned.  The UUID of the root object must not change in the payload and implementations should throw an error if such a request is made. <details>   <summary>Example</summary>   Example request:   ```   PATCH /system-security-plans/cff8385f-108e-40a5-8f7a-82f3dc0eaba8   {     \"system-security-plan\": {       \"uuid\": \"cff8385f-108e-40a5-8f7a-82f3dc0eaba8\",       \"metadata\": {         \"title\": \"Some New Title\"       }     }   }   ``` </details> 
 *
 * API version: 0.1.0
 * Contact: info@easydynamics.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// AddComponentToSsp - Associates a component with an OSCAL system security plan
func AddComponentToSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddImplementedRequirementToSsp - Add an implemented requirement to an OSCAL system security plan
func AddImplementedRequirementToSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddPartyToSsp - Associates a party with an OSCAL system security plan
func AddPartyToSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddSsp - Adds a new OSCAL system security plan
func AddSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteSsp - Deletes an OSCAL system security plan
func DeleteSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindSspsByName - Searches for OSCAL system security plans by name
func FindSspsByName(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetSspById - Finds an OSCAL system security plan by ID
func GetSspById(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetSsps - Returns all OSCAL system security plans
func GetSsps(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveComponentfromSsp - Removes a component from an OSCAL system security plan
func RemoveComponentfromSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemovePartyfromSsp - Removes a party from an OSCAL system security plan
func RemovePartyfromSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ReplaceSsp - Replaces an existing OSCAL system security plan
func ReplaceSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateImplementedRequirementOfSsp - Updates an implemented requirement in an OSCAL system security plan
func UpdateImplementedRequirementOfSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateSsp - Updates an existing OSCAL system security plan
func UpdateSsp(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
