/*
 * OSCAL REST
 *
 * A draft proposal from [Easy Dynamics](https://www.easydynamics.com) of a REST API specification for interacting   with [OSCAL](https://pages.nist.gov/OSCAL/) models.  Standardized data models like OSCAL lay the groundwork for interoperability of systems, and an ecosystem of meaningful integrations can be brought to life through a standardized REST API. That interface needs to define simple CRUD operations, but should also describe how to manipulate relationships and make partial changes.  Such an API will likely see the most success across various vendors and projects when maintained by a standards body or community, and we're looking to get that conversation started with this effort.  ## Identifier Scope Note that all object identifiers are **scoped to the system** implementing the REST API   and are expected to be unique.  <details>   <summary>Example</summary>   To associate a Party with a known Component Definition with a UUID you might:   1. Search for the Party:       ```       GET /parties/search?query=bob       ```       ```       [         {           \"uuid\": \"d834ed5e-9652-4b78-87e7-a9f8686f4e60\",           \"type\": \"person\",           \"name\": \"Bob Johnson\"         }       ]       ```   2. Use the found Party's ID to associate with the component definition:       ```       PUT /component-definitions/599b6fa5-3e18-4580-bd8f-8a181776c6e8/parties/d834ed5e-9652-4b78-87e7-a9f8686f4e60       ``` </details>  ## Partial Payloads in PATCH Requests All updates to 'root' OSCAL objects via `PATCH` requests should accept a partial payload containing only the changed data and the entire updated object should be returned.  The UUID of the root object must not change in the payload and implementations should throw an error if such a request is made. <details>   <summary>Example</summary>   Example request:   ```   PATCH /system-security-plans/cff8385f-108e-40a5-8f7a-82f3dc0eaba8   {     \"system-security-plan\": {       \"uuid\": \"cff8385f-108e-40a5-8f7a-82f3dc0eaba8\",       \"metadata\": {         \"title\": \"Some New Title\"       }     }   }   ``` </details> 
 *
 * API version: 0.1.0
 * Contact: info@easydynamics.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"net/http"

	"github.com/gin-gonic/gin"
)

// AddCatalogToProfile - Defines a catalog import in an OSCAL profile
func AddCatalogToProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddPartyToProfile - Associates a party with an OSCAL profile
func AddPartyToProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddPartyToProfileRole - Associates a party with role within an OSCAL profile
func AddPartyToProfileRole(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddProfile - Adds a new OSCAL profile
func AddProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddProfileToProfile - Defines the import of another profile in an OSCAL profile
func AddProfileToProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// AddRoleToProfile - Adds a new role to an OSCAL profile
func AddRoleToProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// DeleteProfile - Deletes an OSCAL profile
func DeleteProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// FindProfilesByName - Searches for OSCAL profiles by name
func FindProfilesByName(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetProfileById - Finds an OSCAL profile by ID
func GetProfileById(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// GetProfiles - Returns all OSCAL profiles
func GetProfiles(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveCatalogfromProfile - Removes a catalog from an OSCAL profile imports
func RemoveCatalogfromProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemovePartyfromProfile - Removes a party from an OSCAL profile
func RemovePartyfromProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemovePartyfromProfileRole - Removes a party from a role within an OSCAL profile
func RemovePartyfromProfileRole(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveProfilefromProfile - Removes a another profile from an OSCAL profile imports
func RemoveProfilefromProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// RemoveRolefromProfile - Removes a role from an OSCAL profile
func RemoveRolefromProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// ReplaceProfile - Replaces an existing OSCAL profile
func ReplaceProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}

// UpdateProfile - Updates an existing OSCAL profile
func UpdateProfile(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
